/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;
import java.util.Random;
import java.util.*;

public class Library {


    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] arg) {
        System.out.println("hello");
        int[] arrBefore = new int[]{1, 2, 3, 4, 3, 6};
        int[] avgArr = new int[]{2, 4, 7, 8, 9, 5};
        int[][] weeklyMonthTemperatures = new int[][]{{66, 64, 58, 65, 71, 57, 60}, {57, 65, 65, 70, 72, 65, 51}, {55, 54, 60, 53, 59, 57, 61}, {65, 56, 55, 52, 55, 62, 57}};
        int[] var10000 = new int[]{2, 3, 5, 6, 6, 7};
        int num = true;
        roll(4);
        System.out.println(Arrays.toString(roll(4)));
        System.out.println(containsDuplicates(arrBefore));
        System.out.println(arrAverage(avgArr));
        System.out.println(Arrays.toString(tempArr(weeklyMonthTemperatures)));
        System.out.println(Arrays.toString(tempArr(weeklyMonthTemperatures)));
    }

    public static int[] roll(int numOfRolls) {
        int[] newArr = new int[numOfRolls];
        Random randNum = new Random();
        int lowNum = 1;
        int highNum = 6;

        for(int i = 0; i < newArr.length; ++i) {
            newArr[i] = randNum.nextInt(highNum - lowNum) + lowNum;
        }

        return newArr;
    }

    public static boolean containsDuplicates(int[] arrOfNum) {
        for(int i = 0; i < arrOfNum.length; ++i) {
            int num = arrOfNum[i];

            for(int j = i + 1; j < arrOfNum.length; ++j) {
                if (num == arrOfNum[j]) {
                    return true;
                }
            }
        }

        return false;
    }

    public static double arrAverage(int[] integerNums) {
        double totalAvg = 0.0D;
        double sum = 0.0D;

        for(int i = 0; i < integerNums.length; ++i) {
            sum += (double)integerNums[i];
        }

        totalAvg = sum / (double)integerNums.length;
        return totalAvg;
    }

    public static int[] tempArr(int[][] arrOfArr) {
        double lowestNum = 1.7976931348623157E308D;
        double avgArr = 0.0D;
        double avg = 0.0D;
        int[] lowestAvg = arrOfArr[0];

        for(int i = 0; i < arrOfArr.length; ++i) {
            avg = 0.0D;

            for(int j = 0; j < arrOfArr[i].length; ++j) {
                avg += (double)arrOfArr[i][j];
            }

            avg /= (double)arrOfArr[i].length;
            if (avg < lowestNum) {
                lowestNum = avg;
                lowestAvg = arrOfArr[i];
            }
        }

        return lowestAvg;
    }

    public static int[] insertShiftArray(int[] arr, int index) {
        int[] newArr = new int[arr.length + 1];
        int midNum = arr.length / 2;
        if (midNum % 2 == 0) {
            midNum = midNum;
        } else {
            ++midNum;
        }

        newArr[midNum] = index;

        for(int i = 0; i < arr.length + 1; ++i) {
            if (i > midNum) {
                newArr[i] = arr[i - 1];
            }

            if (i < midNum) {
                newArr[i] = arr[i];
            }
        }

        return newArr;
    }
}
