/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
    @Test void restaurantStringTest(){
        Restaurant restaurant1=new Restaurant("reem",2);

        assertEquals(" restaurant reem got 2 stars  so it got this price $$",restaurant1.toString(),
                "it should print this (restaurant reem got 2 stars  so it got this price $$)");
    }

    @Test void restaurantReview(){
        Restaurant restaurant1=new Restaurant("reem",2);
        Review rev=new Review("very good","obada",4);

        restaurant1.addReview(rev);


        assertEquals(restaurant1.getReviews().size(),1,
                restaurant1.getReviews().size());
    }
    @Test void restaurantConstructor(){
            Restaurant restaurant1=new Restaurant("reem",2);
            assertEquals("reem",restaurant1.getName());
        assertEquals(2,restaurant1.getStars());


    }
    @Test void reviewConstructor(){
        Review rev=new Review("very good","obada",4);
        assertEquals("very good",rev.getBody());
        assertEquals("obada",rev.getAutherName());
        assertEquals(4,rev.getStars());


    }
    @Test void reviewStringTest(){
        Review rev=new Review("very good","obada",4);

        assertEquals("The review of this restaurant is very good by obada with  a rating equal 4 stars.",rev.toString(),
                "it should print this (The review of this restaurant is very good by obada with  a rating equal 4 stars.)");
    }
    @Test void shopsConstructor(){
        Shops shop=new Shops("city mall","very good shop");
        assertEquals("city mall",shop.getName());
        assertEquals("very good shop",shop.getDescription());

    }

    @Test void shopsToString(){
        Shops shop=new Shops("city mall","very good shop");

        assertEquals("shop name: city mall\n" +
                "description: very good shop\n" +
                "price: null \n" +
                " Raring: 3" ,shop.toString());



    }

    @Test void theatersConstructor(){
        Theaters theater1=new Theaters("grand theaters");

        assertEquals("grand theaters",theater1.getTheaterName());
    }

    @Test void removeMovieTest(){
        Theaters theater1=new Theaters("grand theaters");

        theater1.addMovie("bleach");
        theater1.addMovie("titanic");
        theater1.removeMovie("bleach");

        assertEquals(theater1.getMovieList().size(),1,theater1.getMovieList().size());
    }

    @Test void addMovieTest(){
        Theaters theater1=new Theaters("grand theaters");

        theater1.addMovie("bleach");
        theater1.addMovie("titanic");
        theater1.addMovie("bleach");

        assertEquals(theater1.getMovieList().size(),1,theater1.getMovieList().size());
    }
    @Test void movieToString(){
        Theaters theater1=new Theaters("grand theaters");
        Review rev=new Review("very good","obada",4);
        theater1.addMovie("bleach");

        theater1.addMovie("titanic");

        theater1.moviesAddReview(rev,"bleach");


        assertEquals("Theaters{theaterName='grand theaters', MovieList=[bleach, titanic], reviews=[The review of this restaurant is very good by obada with  a rating equal 4 stars.]}",theater1.toString());
    }

    @Test void movieAddReview(){
        Theaters theater1=new Theaters("grand theaters");
        Review rev=new Review("very good","obada",4);
        theater1.addMovie("bleach");

        theater1.addMovie("titanic");

        theater1.addReview(rev);

        assertEquals(theater1.getReviews().size(),1,theater1.getReviews().size());

    }









}
